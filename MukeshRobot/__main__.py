import importlib
import re
import time
import asyncio
from platform import python_version as y
from sys import argv
from pyrogram import __version__ as pyrover
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram import __version__ as telever
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop
from telegram.utils.helpers import escape_markdown
from telethon import __version__ as tlhver

import MukeshRobot.modules.no_sql.users_db as sql
from MukeshRobot import (
    BOT_NAME,
    BOT_USERNAME,
    LOGGER,
    OWNER_ID,
    START_IMG,
    SUPPORT_CHAT,
    TOKEN,
    StartTime,
    dispatcher,
    pbot,
    telethn,
    updater,
)
from MukeshRobot.modules import ALL_MODULES
from MukeshRobot.modules.helper_funcs.chat_status import is_user_admin
from MukeshRobot.modules.helper_funcs.misc import paginate_modules


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time
PM_START_TEX = """
 ú·¥á ü ü·¥è `{}`, A·¥ò·¥Ä ·¥ã·¥Ä ô·¥Ä Ä·¥ç·¥ú \n·¥õ·¥ú…¥…¢…¢·¥ú s·¥á ô·¥á…¥·¥õ·¥Ä Ä ·¥ã·¥Ä·¥°·¥Ä…¥ . . . 
"""


PM_START_TEXT = """ 
* ú·¥á è* {} , ‚ù£Ô∏è
*‡πè s·¥Ä è·¥Ä {} ·¥Ö…™ s…™…¥…™ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä…¥·¥õ·¥ú ·¥Ä…¥·¥Ö·¥Ä ·¥ç·¥á…¥…¢·¥á ü·¥è ü·¥Ä …¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä!
 ·¥õ·¥á·¥ã·¥Ä…¥  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢·¥á·¥õ·¥Ä ú·¥ú…™  ü·¥á ô…™ ú  ü·¥Ä…¥·¥ä·¥ú·¥õ ·¥õ·¥á…¥·¥õ·¥Ä…¥…¢ ·¥Ñ·¥Ä Ä·¥Ä ·¥ç·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ s·¥Ä è·¥Ä s·¥á·¥Ñ·¥Ä Ä·¥Ä ·¥ç·¥Ä·¥ãs…™·¥ç·¥Ä ü!*
 ‚ûª *·¥ç·¥Ä…¥·¥Ä·¥ä·¥á·¥ç·¥á…¥ …¢ Ä·¥ú·¥ò ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥ò·¥Ä ü…™…¥…¢ ·¥ã·¥ú·¥Ä·¥õ ‚ûï  ô·¥è·¥õ ·¥ç·¥Ä…¥·¥Ä·¥ä·¥á·¥ç·¥á…¥ ·¥ç·¥ús…™·¥ã ·¥Ö·¥Ä…¥ s·¥Ä è·¥Ä ·¥ç·¥á·¥ç…™ ü…™·¥ã…™  ô·¥á ô·¥á Ä·¥Ä·¥ò·¥Ä “ì…™·¥õ·¥ú Ä  ü·¥ú·¥Ä Ä  ô…™·¥Äs·¥Ä ·¥Ö·¥Ä…¥  ô·¥á Ä…¢·¥ú…¥·¥Ä.*
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   *‚ûª ·¥ús·¥á Äs ¬ª* {}
   *‚ûª ·¥Ñ ú·¥Ä·¥õs ¬ª* {}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""

buttons = [
    [
        InlineKeyboardButton(text="üè°", callback_data="mukesh_back"),
        InlineKeyboardButton(text="üõ°Ô∏è", callback_data="mukesh_"),
        InlineKeyboardButton(text="üí≥", callback_data="source_"),
        InlineKeyboardButton(text="üßë‚Äçüíª", url=f"tg://user?id={OWNER_ID}"),
        InlineKeyboardButton(text="üñ•Ô∏è", callback_data="Main_help"),
     ],
    [
        InlineKeyboardButton(
            text="·¥õ·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ s·¥Ä è·¥Ä ·¥ã·¥á …¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä",
            url=f"https://t.me/{dispatcher.bot.username}?startgroup=true",
        ),
    ],
    [
        InlineKeyboardButton(text="‚öôÔ∏è  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥Ö·¥Ä…¥ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú", callback_data="Main_help"),
    ],
    

]

HELP_STRINGS = f"""
¬ª *{BOT_NAME}  ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥ò·¥á…¥·¥ä·¥á ü·¥Äs·¥Ä…¥ ·¥õ·¥á…¥·¥õ·¥Ä…¥…¢ s·¥ò·¥ás…™“ì…™·¥ã ·¥ç·¥á·¥ç·¥á Ä…™…¥·¥õ·¥Ä ú*"""

DONATE_STRING = f""" ú·¥Ä…™ s·¥Ä è·¥Ä…¥…¢,
  s·¥á…¥·¥Ä…¥…¢ ·¥ç·¥á…¥·¥Ö·¥á…¥…¢·¥Ä Ä  ô·¥Ä ú·¥°·¥Ä ·¥Ä…¥·¥Ö·¥Ä …™…¥…¢…™…¥  ô·¥á Ä·¥Ö·¥è…¥·¥Äs…™.

·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥Ä·¥ò·¥Ä·¥õ  ü·¥Ä…¥…¢s·¥ú…¥…¢ ·¥ç·¥á…¥…¢ ú·¥ú ô·¥ú…¥…¢…™ ·¥ò·¥á…¥…¢·¥á·¥ç ô·¥Ä…¥…¢ s·¥Ä è·¥Ä @Bee\_Domp ·¥ú…¥·¥õ·¥ú·¥ã  ô·¥á Ä·¥Ö·¥è…¥·¥Äs…™ ·¥Ä·¥õ·¥Ä·¥ú ·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á…¥…¢·¥ú…¥·¥ä·¥ú…¥…¢…™ ·¥è ô Ä·¥è ü·¥Ä…¥ ·¥Ö·¥ú·¥ã·¥ú…¥…¢·¥Ä…¥ s·¥Ä è·¥Ä @cari\_kawanindonesia ·¥Ö·¥Ä…¥  ô·¥á Ä·¥õ·¥Ä…¥ è·¥Ä ·¥Ö…™ s·¥Ä…¥·¥Ä ·¥õ·¥á…¥·¥õ·¥Ä…¥…¢ s·¥ú·¥ç ô·¥Ä…¥…¢·¥Ä…¥."""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("MukeshRobot.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("Tidak dapat memiliki dua modul dengan nama yang sama! Silakan ubah satu")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_photo(
        chat_id=chat_id,
        photo=START_IMG,
        caption=text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard,
    )

def start(update: Update, context: CallbackContext):
    args = context.args
    global uptime
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
                    ),
                )
            elif args[0].lower() == "markdownhelp":
                IMPORTED["ex·¥õ Ä·¥Äs"].markdown_help_sender(update)
            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "r·¥ú ü·¥ás" in IMPORTED:
                IMPORTED["r·¥ú ü·¥ás"].send_rules(update, args[0], from_pm=True)

        else:
            first_name = update.effective_user.first_name
            
            x=update.effective_message.reply_sticker(
                "CAACAgUAAxkBAAECdA1l1DPC-oEv3Lu0Aqn1svSSQfB34gACVgwAAlza6VUWUsP4pDar1TQE")
            x.delete()
            usr = update.effective_user
            lol = update.effective_message.reply_text(
                PM_START_TEX.format(usr.first_name), parse_mode=ParseMode.MARKDOWN
            )
            time.sleep(0.4)
            lol.edit_text(" ú·¥Ä…™")
            time.sleep(0.4)
            lol.edit_text("·¥ã·¥Ä·¥ç·¥ú")
            time.sleep(0.4)
            lol.edit_text("Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢... ")
            time.sleep(0.5)
            lol.delete()
            
            update.effective_message.reply_photo(START_IMG,PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
            )
    else:
        update.effective_message.reply_photo(
            START_IMG,
            caption="·¥Ä·¥ã·¥ú ·¥ç·¥Äs…™ ú  ú…™·¥Ö·¥ú·¥ò s·¥Ä è·¥Ä…¥…¢  !\n<b>s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥õ…™·¥Ö·¥ú Ä  ú…™…¥…¢…¢·¥Ä‚Äã:</b> <code>{}</code>".format(
                uptime
            ),
            parse_mode=ParseMode.HTML,
        )


def error_handler(update, context):
    """Catat kesalahannya dan kirim pesan telegram untuk memberi tahu pengembang."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Pengecualian saat menangani pembaruan:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "Pengecualian muncul saat menangani pembaruan\n"
        "<pre>update = {}</pre>\n\n"
        "<pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                "¬ª *·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú  è·¥Ä…¥…¢ ·¥õ·¥á Äs·¥á·¥Ö…™·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã‚Äã‚Äã* *{}* :\n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_caption(text,
                parse_mode=ParseMode.MARKDOWN,
                
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help_back"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="mukesh_support")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()

    except BadRequest:
        pass


def Mukesh_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "mukesh_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_caption(f"* ú·¥á è,*‚ù£Ô∏è\n  *…™…¥…™ ·¥Ä·¥Ö·¥Ä ü·¥Ä ú {dispatcher.bot.first_name}*"
            "\n*·¥ç·¥Ä…¥·¥Ä·¥ä·¥á·¥ç·¥á…¥ ·¥ç·¥ús…™·¥ã ‚ûï ·¥ç·¥Ä…¥·¥Ä·¥ä·¥á·¥ç·¥á…¥ …¢ Ä·¥ú·¥ò ·¥Ñ·¥Ä…¥…¢…¢…™ ú  è·¥Ä…¥…¢ ·¥Ö…™ ô·¥ú·¥Ä·¥õ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä…¥·¥õ·¥ú A…¥·¥Ö·¥Ä ·¥ç·¥á…¥…¢·¥á ü·¥è ü·¥Ä …¢ Ä·¥ú·¥ò ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥ç·¥ú·¥Ö·¥Ä ú ·¥Ö·¥Ä…¥ ·¥ç·¥á ü…™…¥·¥Ö·¥ú…¥…¢…™ …¢ Ä·¥ú·¥ò A…¥·¥Ö·¥Ä ·¥Ö·¥Ä Ä…™ ·¥ò·¥á…¥…™·¥ò·¥ú ·¥Ö·¥Ä…¥ ·¥ò·¥á…¥…¢…™ Ä…™·¥ç s·¥ò·¥Ä·¥ç.*"
            "\n*·¥Ö…™·¥õ·¥ú ü…™s ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥ò è·¥õ ú·¥è…¥ ·¥Ö·¥á…¥…¢·¥Ä…¥ sœô ü·¥Ä ü·¥Ñ ú·¥á·¥ç è ·¥Ö·¥Ä…¥ ·¥ç·¥è…¥…¢·¥è·¥Ö ô s·¥á ô·¥Ä…¢·¥Ä…™ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.*"
            "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            f"\n*‚ûª ·¥ú·¥©·¥õ…™·¥ç·¥á ¬ª* {uptime}"
            f"\n*‚ûª ·¥ús·¥á Äs ¬ª* {sql.num_users()}"
            f"\n*‚ûª ·¥Ñ ú·¥Ä·¥õs ¬ª* {sql.num_chats()}"
            "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            "\n\n‚û≤  s·¥Ä è·¥Ä ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Äs…™ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä."
            "\n‚û≤  ·¥Ä·¥ã·¥ú ·¥ò·¥ú…¥ è·¥Ä s…™s·¥õ·¥á·¥ç ·¥Ä…¥·¥õ…™  ô·¥Ä…¥·¥ä…™ Ä  è·¥Ä…¥…¢ ·¥Ñ·¥Ä…¥…¢…¢…™ ú."
            "\n‚û≤  s·¥Ä è·¥Ä ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á…¥ è·¥Ä·¥ò·¥Ä ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ s·¥á ü·¥Ä·¥ç·¥Ä·¥õ ·¥Ö·¥Ä·¥õ·¥Ä…¥…¢  è·¥Ä…¥…¢ ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥Ö…™s·¥ás·¥ú·¥Ä…™·¥ã·¥Ä…¥ ·¥Ö·¥Ä…¥  ô·¥Ä ú·¥ã·¥Ä…¥ ·¥ç·¥á…¥·¥á·¥õ·¥Ä·¥ò·¥ã·¥Ä…¥ ·¥Ä·¥õ·¥ú Ä·¥Ä…¥ …¢ Ä·¥ú·¥ò."
            "\n‚û≤  s·¥Ä è·¥Ä ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á·¥ç·¥ò·¥á Ä…™…¥…¢·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä s·¥Ä·¥ç·¥ò·¥Ä…™ ·¥ç·¥á Ä·¥á·¥ã·¥Ä ·¥ç·¥á…¥·¥Ñ·¥Ä·¥ò·¥Ä…™ ·¥ç·¥Ä·¥ãs…™·¥ç·¥Ä ü ·¥ò·¥á Ä…™…¥…¢·¥Ä·¥õ·¥Ä…¥, ·¥Ö·¥á…¥…¢·¥Ä…¥ s·¥á·¥õ…™·¥Ä·¥ò ·¥õ…™…¥·¥Ö·¥Ä·¥ã·¥Ä…¥  è·¥Ä…¥…¢ ·¥õ·¥á ü·¥Ä ú ·¥Ö…™·¥õ·¥á…¥·¥õ·¥ú·¥ã·¥Ä…¥ s·¥á·¥ò·¥á Ä·¥õ…™  ô·¥Ä…¥, ·¥ç·¥ú·¥õ·¥á, ·¥ã…™·¥Ñ·¥ã, ·¥Ö ü ü."
            "\n‚û≤  s·¥Ä è·¥Ä ·¥ç·¥á·¥ç…™ ü…™·¥ã…™ s…™s·¥õ·¥á·¥ç ·¥ò·¥á…¥·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥, ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä  ú…™·¥õ·¥Ä·¥ç, ·¥Ö·¥Ä…¥  ô·¥Ä ú·¥ã·¥Ä…¥  ô·¥Ä ü·¥Äs·¥Ä…¥  è·¥Ä…¥…¢ ·¥õ·¥á ü·¥Ä ú ·¥Ö…™·¥õ·¥á…¥·¥õ·¥ú·¥ã·¥Ä…¥ ·¥ò·¥Ä·¥Ö·¥Ä ·¥ã·¥Ä·¥õ·¥Ä ·¥ã·¥ú…¥·¥Ñ…™ ·¥õ·¥á Ä·¥õ·¥á…¥·¥õ·¥ú."
            f"\n\n‚ûª ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü  è·¥Ä…¥…¢ ·¥Ö…™ ô·¥á Ä…™·¥ã·¥Ä…¥ ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú …™…¥…™ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥Ö·¥Ä…¥ …™…¥“ì·¥è Ä·¥ç·¥Äs…™ ·¥Ö·¥Äs·¥Ä Ä ·¥õ·¥á…¥·¥õ·¥Ä…¥…¢ {dispatcher.bot.first_name}.",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
        InlineKeyboardButton(text="üè°", callback_data="mukesh_back"),
        InlineKeyboardButton(text="üõ°Ô∏è", callback_data="mukesh_"),
        InlineKeyboardButton(text="üí≥", callback_data="source_"),
        InlineKeyboardButton(text="üßë‚Äçüíª", url=f"tg://user?id={OWNER_ID}"),
        InlineKeyboardButton(text="üñ•Ô∏è", callback_data="Main_help"),
     ],
                    [
                        InlineKeyboardButton(
                            text="üö©s·¥ú·¥©·¥©·¥è Ä·¥õ", callback_data="mukesh_support"
                        ),
                        InlineKeyboardButton(
                            text="·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös üíÅ", callback_data="Main_help"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="üë®‚Äçüíª·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä", url=f"tg://user?id={OWNER_ID}"
                        ),
                        InlineKeyboardButton(
                            text="ü•Äs·¥è·¥ú Ä·¥Ñ·¥á",
                            callback_data="source_",
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ", callback_data="mukesh_back"),
                    ],
                ]
            ),
        )
    elif query.data == "mukesh_support":
        query.message.edit_caption("**‡πè ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü  è·¥Ä…¥…¢ ·¥Ö…™ ô·¥á Ä…™·¥ã·¥Ä…¥ ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú …™…¥…™ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥Ö·¥Ä…¥ …™…¥“ì·¥è Ä·¥ç·¥Äs…™  ü·¥á ô…™ ú  ü·¥Ä…¥J·¥ú·¥õ**"
            f"\n\nJ…™·¥ã·¥Ä ·¥Ä…¥·¥Ö·¥Ä ·¥ç·¥á…¥·¥á·¥ç·¥ú·¥ã·¥Ä…¥  ô·¥ú…¢ ·¥Ö…™ {dispatcher.bot.first_name} ·¥Ä·¥õ·¥Ä·¥ú J…™·¥ã·¥Ä ·¥Ä…¥·¥Ö·¥Ä …™…¥…¢…™…¥ ·¥ç·¥á·¥ç ô·¥á Ä…™·¥ã·¥Ä…¥ ·¥õ·¥Ä…¥…¢…¢·¥Ä·¥ò·¥Ä…¥ ·¥õ·¥á…¥·¥õ·¥Ä…¥…¢ {dispatcher.bot.first_name}, s…™ ü·¥Ä·¥ã·¥Ä…¥  ü·¥Ä·¥ò·¥è Ä·¥ã·¥Ä…¥ ·¥Ö…™ …¢ Ä·¥ú·¥ò s·¥ú·¥ò·¥ò·¥è Ä·¥õ.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
        InlineKeyboardButton(text="üè°", callback_data="mukesh_back"),
        InlineKeyboardButton(text="üõ°Ô∏è", callback_data="mukesh_"),
        InlineKeyboardButton(text="üí≥", callback_data="source_"),
        InlineKeyboardButton(text="üßë‚Äçüíª", url=f"tg://user?id={OWNER_ID}"),
        InlineKeyboardButton(text="üñ•Ô∏è", callback_data="Main_help"),
     ],
                    [
                        InlineKeyboardButton(
                            text="üè° s·¥ú·¥©·¥©·¥è Ä·¥õ", url=f"https://t.me/{SUPPORT_CHAT}"
                        ),
                        InlineKeyboardButton(
                            text="·¥ú·¥©·¥Ö·¥Ä·¥õ·¥ás üç∑", url=f"\x68\x74\x74\x70\x73\x3A\x2F\x2F\x74\x2E\x6D\x65\x2F\x6D\x75\x6B\x65\x73\x68\x62\x6F\x74\x7A\x6F\x6E\x65"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="ü•Ä ·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä", url=f"tg://user?id={OWNER_ID}"
                        ),
                        InlineKeyboardButton(
                            text="…¢…™·¥õ ú·¥ú ô üçπ", url="\x68\x74\x74\x70\x73\x3A\x2F\x2F\x67\x69\x74\x68\x75\x62\x2E\x63\x6F\x6D\x2F\x6E\x6F\x6F\x62\x2D\x6D\x75\x6B\x65\x73\x68"
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ", callback_data="mukesh_"),
                    ],
                ]
            ),
        )
    elif query.data == "mukesh_back":
        first_name = update.effective_user.first_name 
        query.message.edit_caption(PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
        )
def MukeshRobot_Main_Callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Main_help":
        query.message.edit_caption(f"""
  ú·¥á Ä·¥á …™Íú±  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú Íú∞·¥è Ä {BOT_NAME}
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üìï M·¥Ä…¥·¥Ä…¢·¥á", callback_data="help_back"),
                        InlineKeyboardButton(text="M·¥ús…™·¥Ñ üé∂", callback_data="Music_")
                    ],
                    [
                        InlineKeyboardButton(text="üíÅ B·¥Äs…™·¥Ñ ", callback_data="basic_help"),
                        InlineKeyboardButton(text="Ex·¥ò·¥á Ä·¥õ üëÆ", callback_data="expert_help")
                    ],
                    [
                        InlineKeyboardButton(text="üçπ A·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á", callback_data="advance_help"),
                        InlineKeyboardButton(text="D·¥è…¥·¥Ä·¥õ…™·¥è…¥ üéâ", callback_data="donation_help") 
                    ],
                    [InlineKeyboardButton(text="‚Ä¢ H·¥è·¥ç·¥á ‚Ä¢", callback_data="mukesh_back")]
                ]
            ),
        )
    elif query.data=="basic_help":
        query.message.edit_caption("""·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ö·¥Äs·¥Ä Ä.
üëÆüèª·¥õ·¥á Äs·¥á·¥Ö…™·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ö·¥Ä…¥ ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Ä.
üïµüèª·¥õ·¥á Äs·¥á·¥Ö…™·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥Ä·¥Ö·¥ç…™…¥.

üëÆüèª /reload ·¥ç·¥á·¥ç·¥ò·¥á Ä ô·¥Ä Ä·¥ú…™ ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä ·¥Ä·¥Ö·¥ç…™…¥.
üïµüèª /settings ·¥ç·¥á…¥…¢·¥á ü·¥è ü·¥Ä ·¥Ö·¥Ä…¥ ·¥ò·¥á…¥…¢·¥Ä·¥õ·¥ú Ä·¥Ä…¥  ô·¥è·¥õ ·¥Ö·¥Ä ü·¥Ä·¥ç …¢ Ä·¥ú·¥ò.
üëÆüèª /ban ·¥ç·¥á·¥ç·¥ú…¥…¢·¥ã…™…¥·¥ã·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥ç·¥á…¥·¥Ñ·¥á·¥ã·¥Ä ü ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥Ö·¥Ä Ä…™ …¢ Ä·¥ú·¥ò ·¥õ·¥Ä…¥·¥ò·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä…™…¥ è·¥Ä ·¥ã·¥á·¥ç·¥ú…¥…¢·¥ã…™…¥·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã  ô·¥á Ä…¢·¥Ä ô·¥ú…¥…¢  ü·¥Ä…¢…™ ·¥ç·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ ·¥õ·¥Ä·¥ú·¥õ·¥Ä…¥ …¢ Ä·¥ú·¥ò.
üëÆüèª /mute ·¥ç·¥á…¥·¥á·¥ç·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥Ö·¥Ä ü·¥Ä·¥ç ·¥ç·¥è·¥Ö·¥á  ú·¥Ä…¥ è·¥Ä  ô·¥Ä·¥Ñ·¥Ä. ·¥Ö…™·¥Ä  ô…™s·¥Ä ·¥ç·¥á·¥ç ô·¥Ä·¥Ñ·¥Ä ·¥õ·¥Ä·¥ò…™ ·¥Ö…™·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ò·¥ás·¥Ä…¥ ·¥Ä·¥ò·¥Ä ·¥ò·¥ú…¥.
üëÆüèª /kick ·¥ç·¥á ü·¥Ä Ä·¥Ä…¥…¢ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥Ö·¥Ä Ä…™ …¢ Ä·¥ú·¥ò, ·¥ç·¥á·¥ç ô·¥á Ä…™…¥ è·¥Ä ·¥ã·¥á·¥ç·¥ú…¥…¢·¥ã…™…¥·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã  ô·¥á Ä…¢·¥Ä ô·¥ú…¥…¢  ü·¥Ä…¢…™ ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥õ·¥Ä·¥ú·¥õ·¥Ä…¥ …¢ Ä·¥ú·¥ò.
üëÆüèª /unban ·¥ç·¥á·¥ç·¥ú…¥…¢·¥ã…™…¥·¥ã·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥Ö·¥Ä Ä…™ ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä  ú…™·¥õ·¥Ä·¥ç …¢ Ä·¥ú·¥ò, ·¥ç·¥á·¥ç ô·¥á Ä…™ ·¥ç·¥á Ä·¥á·¥ã·¥Ä ·¥ã·¥á·¥ç·¥ú…¥…¢·¥ã…™…¥·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã  ô·¥á Ä…¢·¥Ä ô·¥ú…¥…¢  ü·¥Ä…¢…™ ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥õ·¥Ä·¥ú·¥õ·¥Ä…¥ …¢ Ä·¥ú·¥ò.
üëÆüèª /info ·¥ç·¥á·¥ç ô·¥á Ä…™·¥ã·¥Ä…¥ …™…¥“ì·¥è Ä·¥ç·¥Äs…™ ·¥õ·¥á…¥·¥õ·¥Ä…¥…¢ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä.

‚óΩÔ∏è /staff ·¥ç·¥á·¥ç ô·¥á Ä…™·¥ã·¥Ä…¥ ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä  ü·¥á…¥…¢·¥ã·¥Ä·¥ò s·¥õ·¥Ä“ì …¢ Ä·¥ú·¥ò!.""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="mukesh_support")
                    ]
                ]
            ),
            )
    elif query.data=="mukesh_back":
        query.message.edit_caption("""·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ä ú ü…™

üë• ·¥õ·¥á Äs·¥á·¥Ö…™·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã s·¥á·¥ç·¥ú·¥Ä ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä.
üëÆüèª ·¥õ·¥á Äs·¥á·¥Ö…™·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ö·¥Ä…¥ ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Ä.
üïµüèª ·¥õ·¥á Äs·¥á·¥Ö…™·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥Ä·¥Ö·¥ç…™…¥.

üïµüèª  /unbanall ·¥Ä…¥…¢…¢·¥è·¥õ·¥Ä ·¥Ö·¥Ä Ä…™ …¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä
üëÆüèª  /unmuteall s·¥ú·¥Ä Ä·¥Ä·¥ã·¥Ä…¥ s·¥á·¥ç·¥ú·¥Ä ·¥Ö·¥Ä Ä…™ …¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä

·¥ò·¥ás·¥Ä…¥ s·¥á·¥ç·¥Ä·¥õ·¥Ä…¥
üïµüèª  /pin [·¥ò·¥ás·¥Ä…¥] ·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ò·¥ás·¥Ä…¥ ·¥ç·¥á ü·¥Ä ü·¥ú…™  ô·¥è·¥õ ·¥Ö·¥Ä…¥ ·¥ç·¥á…¥ è·¥á·¥ç·¥Ä·¥õ·¥ã·¥Ä…¥…¥ è·¥Ä.
üïµüèª  /pin ·¥ç·¥á…¥ è·¥á·¥ç·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ s·¥á ô·¥Ä…¢·¥Ä…™  ô·¥Ä ü·¥Äs·¥Ä…¥
üïµüèª  /unpin  ú·¥Ä·¥ò·¥ús ·¥ò·¥ás·¥Ä…¥  è·¥Ä…¥…¢ ·¥Ö…™s·¥á·¥ç·¥Ä·¥õ·¥ã·¥Ä…¥.
üïµüèª  /adminlist ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä s·¥á·¥ç·¥ú·¥Ä ·¥ò·¥á Ä·¥Ä…¥ ·¥ã ú·¥ús·¥ús  è·¥Ä…¥…¢ ·¥Ö…™ ô·¥á Ä…™·¥ã·¥Ä…¥ ·¥ã·¥á·¥ò·¥Ä·¥Ö·¥Ä ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä.

‚óΩÔ∏è /bug: (·¥ò·¥ás·¥Ä…¥) ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ò·¥ás·¥Ä…¥ ·¥Ö·¥Ä…¥ ·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥  è·¥Ä…¥…¢ ·¥Ä…¥·¥Ö·¥Ä  ú·¥Ä·¥Ö·¥Ä·¥ò…™ 
·¥áx: /bug  ú·¥á…™ ·¥Ä·¥Ö·¥Ä s·¥ás·¥ú·¥Ä·¥õ·¥ú  è·¥Ä…¥…¢ ·¥á Ä Ä·¥è Ä @Username ·¥è ô Ä·¥è ü·¥Ä…¥! .""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="mukesh_support")
                    ]
                ]
            ),
            )                                        
    elif query.data=="advance_help":
        query.message.edit_caption("""·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú  ü·¥Ä…¥J·¥ú·¥õ·¥Ä…¥

üëÆüèª·¥õ·¥á Äs·¥á·¥Ö…™·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ö·¥Ä…¥ ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Ä.
üïµüèª·¥õ·¥á Äs·¥á·¥Ö…™·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥Ä·¥Ö·¥ç…™…¥.
üõÉ ·¥õ·¥á Äs·¥á·¥Ö…™·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥Ä·¥Ö·¥ç…™…¥ & ·¥ò·¥á·¥ç ô·¥á Äs…™ ú

·¥ç·¥á·¥ç·¥ò·¥á Ä…™…¥…¢·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥ç·¥Ä…¥·¥ÄJ·¥á·¥ç·¥á…¥
üëÆüèª  /warn ·¥ç·¥á…¥·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ ·¥ò·¥á Ä…™…¥…¢·¥Ä·¥õ·¥Ä…¥ ·¥ã·¥á·¥ò·¥Ä·¥Ö·¥Ä ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä
üëÆüèª  /unwarn  ú·¥Ä·¥ò·¥ús ·¥ò·¥á Ä…™…¥…¢·¥Ä·¥õ·¥Ä…¥ ·¥ã·¥á·¥ò·¥Ä·¥Ö·¥Ä ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä
üëÆüèª  /warns ·¥ç·¥á·¥ç·¥ú…¥…¢·¥ã…™…¥·¥ã·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥ç·¥á ü…™ ú·¥Ä·¥õ ·¥Ö·¥Ä…¥ ·¥ç·¥á…¥…¢·¥á ü·¥è ü·¥Ä ·¥ò·¥á Ä…™…¥…¢·¥Ä·¥õ·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä

üõÉ  /del ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús ·¥ò·¥ás·¥Ä…¥
üõÉ  /purge ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús ·¥Ö·¥Ä Ä…™ ·¥ò·¥ás·¥Ä…¥  è·¥Ä…¥…¢ ·¥Ö…™·¥ò…™ ü…™ ú.""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="mukesh_support")
                    ]
                ]
            ),
            )
    elif query.data=="expert_help":
        query.message.edit_caption(f"""‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
J·¥Ä·¥Ö…™·¥ã·¥Ä…¥ …¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä ·¥á“ì·¥á·¥ã·¥õ…™“ì s·¥á·¥ã·¥Ä Ä·¥Ä…¥…¢ :
üéâ ·¥Ñ·¥è…¥…¢ Ä·¥Ä…¢·¥ú ü·¥Ä·¥õ…™·¥è…¥Íú± üéâ
[{BOT_NAME}]("https://t.me/{BOT_USERNAME}") s·¥á·¥ã·¥Ä Ä·¥Ä…¥…¢ s…™·¥Ä·¥ò ·¥ú…¥·¥õ·¥ú·¥ã
·¥ç·¥á…¥…¢·¥á ü·¥è ü·¥Ä …¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä.

·¥Ä ü·¥Ä·¥õ ·¥Ä·¥Ö·¥ç…™…¥ :
·¥Ä ü·¥Ä·¥õ ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ö·¥Äs·¥Ä Ä ·¥ç·¥á·¥ç ô·¥Ä…¥·¥õ·¥ú ·¥Ä…¥·¥Ö·¥Ä
·¥ç·¥á ü…™…¥·¥Ö·¥ú…¥…¢…™ & ·¥ç·¥á·¥ç·¥ò·¥á Ä·¥ã·¥ú·¥Ä·¥õ …¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä.
·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á ü·¥Ä Ä·¥Ä…¥…¢, ·¥ç·¥á…¥·¥á…¥·¥Ö·¥Ä…¥…¢, ·¥ç·¥á·¥ç·¥ò Ä·¥è·¥ç·¥ès…™·¥ã·¥Ä…¥
·¥Ä…¥…¢…¢·¥è·¥õ·¥Ä s·¥á ô·¥Ä…¢·¥Ä…™ ·¥Ä·¥Ö·¥ç…™…¥ ·¥ç·¥á ü·¥Ä ü·¥ú…™  ô·¥è·¥õ.

s·¥Ä ü·¥Ä·¥ç :
·¥ç·¥Ä Ä…™ ·¥Ä·¥õ·¥ú Ä ·¥ò·¥ás·¥Ä…¥ s·¥á ü·¥Ä·¥ç·¥Ä·¥õ ·¥Ö·¥Ä·¥õ·¥Ä…¥…¢
·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥ è·¥Ä·¥ç ô·¥ú·¥õ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä  ô·¥Ä Ä·¥ú
 è·¥Ä…¥…¢ ·¥Ö·¥Ä·¥õ·¥Ä…¥…¢ ·¥ã·¥á …¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä.
·¥ã…™ Ä…™·¥ç /setwelcome ·¥ò·¥ás·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã 
·¥ç·¥á…¥…¢·¥Ä·¥õ·¥ú Ä ·¥ò·¥ás·¥Ä…¥ s·¥á ü·¥Ä·¥ç·¥Ä·¥õ ·¥Ö·¥Ä·¥õ·¥Ä…¥…¢!""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="mukesh_support")
                    ]
                ]
            ),
            )
    elif query.data=="donation_help":
        query.message.edit_caption("""·¥Ä·¥ò·¥Ä·¥ã·¥Ä ú ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á Ä·¥õ·¥Ä Ä…™·¥ã ·¥ç·¥á·¥ç ô·¥Ä…¥·¥õ·¥ú ·¥ò·¥á…¥·¥Ñ…™·¥ò·¥õ·¥Ä s·¥Ä è·¥Ä ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥ú·¥ò·¥Ä è·¥Ä…¥ è·¥Ä ·¥Ä…¢·¥Ä Ä s·¥Ä è·¥Ä ·¥õ·¥á·¥õ·¥Ä·¥ò ·¥Ä·¥ã·¥õ…™“ì  ô·¥á Ä·¥ã·¥á·¥ç ô·¥Ä…¥…¢? J…™·¥ã·¥Ä  è·¥Ä, ·¥Ä…¥·¥Ö·¥Ä  ô·¥á Ä·¥Ä·¥Ö·¥Ä ·¥Ö…™ ·¥õ·¥á·¥ç·¥ò·¥Ä·¥õ  è·¥Ä…¥…¢ ·¥õ·¥á·¥ò·¥Ä·¥õ. 

·¥ã·¥Ä·¥ç…™ ·¥ç·¥á…¥·¥á·¥ã·¥Ä…¥·¥ã·¥Ä…¥ ·¥ò·¥á…¥·¥õ…™…¥…¢…¥ è·¥Ä ·¥ã·¥á ô·¥ú·¥õ·¥ú ú·¥Ä…¥ ·¥Ö·¥Ä…¥·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥J·¥Ä…¢·¥Ä B·¥á·¥áS·¥ò·¥è·¥õ…™“ì è ·¥Ö·¥Ä ü·¥Ä·¥ç ·¥ò·¥á…¥…¢·¥á·¥ç ô·¥Ä…¥…¢·¥Ä…¥ ·¥Ä·¥ã·¥õ…™“ì, s·¥ú·¥ç ô·¥Ä…¥…¢·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥Ä ü·¥Ä·¥ç J·¥ú·¥ç ü·¥Ä ú  ô·¥á Ä·¥Ä·¥ò·¥Ä ·¥ò·¥ú…¥ ·¥ã·¥á s·¥á Ä·¥†·¥á Ä B·¥á·¥áS·¥ò·¥è·¥õ…™“ì è ·¥Ö·¥Ä…¥ ·¥ú·¥õ…™ ü…™·¥õ·¥Äs  ü·¥Ä…™…¥…¥ è·¥Ä ·¥Ä·¥ã·¥Ä…¥ ·¥ç·¥á·¥ç·¥ú…¥…¢·¥ã…™…¥·¥ã·¥Ä…¥ ·¥ã·¥Ä·¥ç…™ ·¥ç·¥á·¥ç·¥ò·¥á Ä·¥õ·¥Ä ú·¥Ä…¥·¥ã·¥Ä…¥ ·¥ú·¥ç·¥ú Ä ·¥Ö·¥Ä ü·¥Ä·¥ç J·¥Ä…¥…¢·¥ã·¥Ä ·¥ò·¥Ä…¥J·¥Ä…¥…¢. ·¥ã·¥Ä·¥ç…™ ·¥Ä·¥ã·¥Ä…¥ ·¥ç·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ s·¥á·¥ç·¥ú·¥Ä ·¥Ö·¥è…¥·¥Äs…™ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥ú·¥õ·¥ú·¥ò…™ ·¥ò·¥á…¥…¢·¥á ü·¥ú·¥Ä Ä·¥Ä…¥ ·¥Ö…™ ·¥ç·¥Äs·¥Ä ·¥Ö·¥á·¥ò·¥Ä…¥ ·¥Ö·¥Ä…¥  ô…™·¥Ä è·¥Ä ·¥ò·¥á…¥…™…¥…¢·¥ã·¥Ä·¥õ·¥Ä…¥ s·¥á Ä·¥†·¥á Ä. J…™·¥ã·¥Ä ·¥Ä…¥·¥Ö·¥Ä ·¥ç·¥á·¥ç…™ ü…™·¥ã…™ ·¥ú·¥Ä…¥…¢ ·¥Ñ·¥Ä·¥Ö·¥Ä…¥…¢·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä…¥·¥õ·¥ú PBB ·¥Ö·¥Ä ü·¥Ä·¥ç ·¥ú·¥ò·¥Ä è·¥Ä …™…¥…™, s…™ ü·¥Ä·¥ã·¥Ä…¥  ü·¥Ä·¥ã·¥ú·¥ã·¥Ä…¥ …™·¥õ·¥ú ·¥Ö·¥Ä…¥ ·¥Ö·¥è…¥·¥Äs…™ ·¥Ä…¥·¥Ö·¥Ä J·¥ú…¢·¥Ä ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á·¥ç·¥è·¥õ…™·¥†·¥Äs…™ ·¥ã·¥Ä·¥ç…™ ·¥ú…¥·¥õ·¥ú·¥ã ·¥õ·¥á Ä·¥ús ·¥ç·¥á·¥ç ô·¥á Ä…™·¥ã·¥Ä…¥  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥  ô·¥Ä Ä·¥ú.

·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á·¥ç ô·¥Ä…¥·¥õ·¥ú ·¥ò·¥á…¥…¢·¥á·¥ç ô·¥Ä…¥…¢·¥Ä…¥ ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥Ö·¥è…¥·¥Äs…™""",parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [ [
        InlineKeyboardButton(text="üè°", callback_data="mukesh_back"),
        InlineKeyboardButton(text="üõ°Ô∏è", callback_data="mukesh_"),
        InlineKeyboardButton(text="üí≥", callback_data="source_"),
        InlineKeyboardButton(text="üßë‚Äçüíª", url=f"tg://user?id={OWNER_ID}"),
        InlineKeyboardButton(text="üñ•Ô∏è", callback_data="Main_help"),
     ],
                    [
                        InlineKeyboardButton(text="‚Ä¢ D·¥è…¥·¥Ä·¥õ·¥á ‚Ä¢", url="https://t.me/mukeshbotzone/7"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="mukesh_support")
                    ]
                ]
            ),
            )  
def Source_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "source_":
        query.message.edit_caption(
            f"""
* ú·¥á è,
 …™…¥…™ {BOT_NAME},
 ô·¥è·¥õ ·¥ç·¥Ä…¥·¥ÄJ·¥á·¥ç·¥á…¥ …¢ Ä·¥ú·¥ò ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç s·¥ú·¥ç ô·¥á Ä ·¥õ·¥á Ä ô·¥ú·¥ã·¥Ä.*

·¥Ö…™·¥õ·¥ú ü…™s ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥ò è·¥õ ú·¥è…¥ ·¥Ö·¥á…¥…¢·¥Ä…¥  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ : [·¥õ·¥á ü·¥á·¥õ ú·¥è…¥](https://github.com/LonamiWebs/Telethon)
[·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç](https://github.com/pyrogram/pyrogram)
[·¥© è·¥õ ú·¥è…¥-·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç- ô·¥è·¥õ](https://github.com/python-telegram-bot/python-telegram-bot)
·¥Ö·¥Ä…¥ ·¥ç·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ [s«´ ü·¥Ä ü·¥Ñ ú·¥á·¥ç è](https://www.sqlalchemy.org) ·¥Ö·¥Ä…¥ [·¥ç·¥è…¥…¢·¥è](https://cloud.mongodb.com) s·¥á ô·¥Ä…¢·¥Ä…™ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.


*·¥Ö…™s…™…¥…™ ·¥Ä·¥Ö·¥Ä ü·¥Ä ú s·¥ú·¥ç ô·¥á Ä ·¥ã·¥è·¥Ö·¥á s·¥Ä è·¥Ä :* […¢…™·¥õ ú·¥ú ô](\x68\x74\x74\x70\x73\x3A\x2F\x2F\x67\x69\x74\x68\x75\x62\x2E\x63\x6F\x6D\x2F\x4E\x6F\x6F\x62\x2D\x4D\x75\x6B\x65\x73\x68\x2F\x4D\x75\x6B\x65\x73\x68\x52\x6F\x62\x6F\x74)


{BOT_NAME}  ô·¥á Ä ü…™s·¥á…¥s…™ ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú [·¥ç…™·¥õ  ü…™·¥Ñ·¥á…¥s·¥á](\x68\x74\x74\x70\x73\x3A\x2F\x2F\x67\x69\x74\x68\x75\x62\x2E\x63\x6F\x6D\x2F\x4E\x6F\x6F\x62\x2D\x4D\x75\x6B\x65\x73\x68\x2F\x4D\x75\x6B\x65\x73\x68\x52\x6F\x62\x6F\x74/blob/main/LICENSE).
¬© 2023 - 2024 | [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ](https://t.me/{SUPPORT_CHAT}), s·¥á ü·¥ú Ä·¥ú ú  ú·¥Ä·¥ã ·¥Ñ…™·¥ò·¥õ·¥Ä.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [[
        InlineKeyboardButton(text="s·¥è·¥ú Ä·¥Ñ·¥á", url="\x68\x74\x74\x70\x73\x3A\x2F\x2F\x67\x69\x74\x68\x75\x62\x2E\x63\x6F\x6D\x2F\x4E\x6F\x6F\x62\x2D\x4D\x75\x6B\x65\x73\x68\x2F\x4D\x75\x6B\x65\x73\x68\x52\x6F\x62\x6F\x74")
                ],
                 [
        InlineKeyboardButton(text="üè°", callback_data="mukesh_back"),
        InlineKeyboardButton(text="üõ°Ô∏è", callback_data="mukesh_"),
        InlineKeyboardButton(text="üí≥", callback_data="source_"),
        InlineKeyboardButton(text="üßë‚Äçüíª", url=f"tg://user?id={OWNER_ID}"),
        InlineKeyboardButton(text="üñ•Ô∏è", callback_data="Main_help"),
     ],[InlineKeyboardButton(text="‚óÅ", callback_data="source_back")]]
            ),
        )
    elif query.data == "source_back":
        first_name = update.effective_user.first_name
        query.message.edit_caption(
            PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            
        )

        
def Music_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Music_":
        query.message.edit_caption(f"""
  ·¥Ö…™s…™…¥…™ ·¥Ä·¥Ö·¥Ä ü·¥Ä ú ·¥ç·¥á…¥·¥ú  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥ús…™·¥ã
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
        InlineKeyboardButton(text="üè°", callback_data="mukesh_back"),
        InlineKeyboardButton(text="üõ°Ô∏è", callback_data="mukesh_"),
        InlineKeyboardButton(text="üí≥", callback_data="source_"),
        InlineKeyboardButton(text="üßë‚Äçüíª", url=f"tg://user?id={OWNER_ID}"),
        InlineKeyboardButton(text="üñ•Ô∏è", callback_data="Main_help"),
     ],
                    [
                        InlineKeyboardButton(
                            text="‚çü ·¥Ä·¥Ö·¥ç…™…¥ ‚çü", callback_data="Music_admin"
                        ),
                        InlineKeyboardButton(
                            text="‚çü ·¥ò ü·¥Ä è ‚çü", callback_data="Music_play"
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚çü  ô·¥è·¥õ ‚çü", callback_data="Music_bot"),
                        InlineKeyboardButton(
                            text="‚çü ·¥áx·¥õ Ä·¥Ä ‚çü",
                            callback_data="Music_extra",
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help")
                    ],
                ]
            ),
        )
    elif query.data == "Music_admin":
        query.message.edit_caption(f"*¬ª ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ä·¥Ö·¥ç…™…¥ ¬´*"
            f"""
·¥õ·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ s·¥Ä·¥ä·¥Ä *·¥Ñ* ·¥Ö…™ ·¥Ä·¥°·¥Ä ü ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ s·¥Ä ü·¥ú Ä·¥Ä…¥.

/pause : ·¥ä·¥á·¥Ö·¥Ä s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  è·¥Ä…¥…¢ s·¥á·¥Ö·¥Ä…¥…¢ ·¥Ö…™ ·¥ò·¥ú·¥õ·¥Ä Ä.

/resume : ·¥ç·¥á ü·¥Ä…¥·¥ä·¥ú·¥õ·¥ã·¥Ä…¥ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  è·¥Ä…¥…¢ ·¥Ö…™ ·¥ä·¥á·¥Ö·¥Ä.

/skip : ·¥ç·¥á ü·¥á·¥°·¥Ä·¥õ…™  ü·¥Ä…¢·¥ú  è·¥Ä…¥…¢ s·¥ú·¥Ö·¥Ä ú ·¥Ö…™ ·¥ò·¥ú·¥õ·¥Ä Ä.

/end ·¥è Ä /stop : ·¥ç·¥á·¥ç·¥Ä·¥õ…™·¥ã·¥Ä…¥ ·¥Ö·¥Ä…¥ ·¥ç·¥á·¥ç ô·¥á Ä ú·¥á…¥·¥õ…™·¥ã·¥Ä…¥  ü·¥Ä…¢·¥ú  è·¥Ä…¥…¢ s·¥ú·¥Ö·¥Ä ú ·¥Ö…™ ·¥ò·¥ú·¥õ·¥Ä Ä.

/player : ·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥ò·¥Ä…¥·¥á ü ·¥ò·¥á·¥ç·¥ú·¥õ·¥Ä Ä …™…¥·¥õ·¥á Ä·¥Ä·¥ã·¥õ…™“ì.

/queue : ·¥ç·¥á…¥·¥Ä·¥ç·¥ò…™ ü·¥ã·¥Ä…¥ ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä  ü·¥Ä…¢·¥ú  è·¥Ä…¥…¢ ·¥Ö…™ ·¥Ä…¥·¥õ Ä…™.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="mukesh_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_play":
        query.message.edit_caption(f"*¬ª ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥ò ü·¥Ä è ¬´*"
            f"""
/play or /vplay or /cplay  - ·¥ç·¥á·¥ç·¥ú·¥õ·¥Ä Ä  ü·¥Ä…¢·¥ú  è·¥Ä…¥…¢ ·¥Ö…™ ·¥ç…™…¥·¥õ·¥Ä.

/playforce or /vplayforce or /cplayforce -  “ì·¥è Ä·¥Ñ·¥á ·¥ò ü·¥Ä è ·¥ç·¥á…¥…¢ ú·¥á…¥·¥õ…™·¥ã·¥Ä…¥ ·¥õ Ä·¥á·¥ã  è·¥Ä…¥…¢ s·¥á·¥Ö·¥Ä…¥…¢ ·¥Ö…™·¥ò·¥ú·¥õ·¥Ä Ä ·¥Ö…™ ·¥è ô Ä·¥è ü·¥Ä…¥ s·¥ú·¥Ä Ä·¥Ä ·¥Ö·¥Ä…¥ ·¥ç·¥ú ü·¥Ä…™ ·¥ç·¥á·¥ç·¥ú·¥õ·¥Ä Ä ·¥õ Ä·¥á·¥ã  è·¥Ä…¥…¢ ·¥Ö…™·¥Ñ·¥Ä Ä…™ s·¥á·¥Ñ·¥Ä Ä·¥Ä …™…¥s·¥õ·¥Ä…¥ ·¥õ·¥Ä…¥·¥ò·¥Ä ·¥ç·¥á…¥…¢…¢·¥Ä…¥…¢…¢·¥ú/·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús ·¥Ä…¥·¥õ Ä…™·¥Ä…¥.

/channelplay [·¥Ñ ú·¥Ä·¥õ ·¥úÍú±·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä …™·¥Ö] ·¥è Ä [·¥Ö…™Íú±·¥Ä ô ü·¥á] - s·¥Ä·¥ç ô·¥ú…¥…¢·¥ã·¥Ä…¥ s·¥Ä ü·¥ú Ä·¥Ä…¥ ·¥ã·¥á …¢ Ä·¥ú·¥ò ·¥Ö·¥Ä…¥ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥ç·¥ús…™·¥ã ·¥Ö…™ s·¥Ä ü·¥ú Ä·¥Ä…¥ ·¥è ô Ä·¥è ü·¥Ä…¥ s·¥ú·¥Ä Ä·¥Ä ·¥Ö·¥Ä Ä…™ …¢ Ä·¥ú·¥ò ·¥Ä…¥·¥Ö·¥Ä.


*·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú  ô·¥è·¥õ*
 ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä ·¥ò·¥ú·¥õ·¥Ä Ä s·¥á Ä·¥†·¥á Ä  ô·¥è·¥õ:
/playlist  - ·¥ò·¥á Ä…™·¥ãs·¥Ä ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä ·¥ò·¥ú·¥õ·¥Ä Ä ·¥Ä…¥·¥Ö·¥Ä  è·¥Ä…¥…¢ ·¥Ö…™s…™·¥ç·¥ò·¥Ä…¥ ·¥Ö…™ s·¥á Ä·¥†·¥á Ä.
/deleteplaylist - ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä ·¥ò·¥ú·¥õ·¥Ä Ä ·¥Ä…¥·¥Ö·¥Ä  è·¥Ä…¥…¢ ·¥Ö…™s…™·¥ç·¥ò·¥Ä…¥ ·¥Ö…™ s·¥á Ä·¥†·¥á Ä
/play  - ·¥ç·¥á·¥ç·¥ú·¥õ·¥Ä Ä ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä ·¥ò·¥ú·¥õ·¥Ä Ä  è·¥Ä…¥…¢ ·¥Ä…¥·¥Ö·¥Ä s…™·¥ç·¥ò·¥Ä…¥ ·¥Ö…™ s·¥á Ä·¥†·¥á Ä.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="mukesh_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_bot":
        query.message.edit_caption(f"*¬ª ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú  ô·¥è·¥õ ¬´*"
            f"""
/stats - ·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ùü∑ùü∂  ü·¥Ä…¢·¥ú ·¥õ·¥á Ä·¥Ä·¥õ·¥Äs s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥ã …¢ ü·¥è ô·¥Ä ü, ùü∑ùü∂ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä  ô·¥è·¥õ ·¥õ·¥á Ä·¥Ä·¥õ·¥Äs, ùü∑ùü∂ ·¥è ô Ä·¥è ü·¥Ä…¥ ·¥õ·¥á Ä·¥Ä·¥õ·¥Äs ·¥Ö…™  ô·¥è·¥õ, ùü∑ùü∂ ·¥õ·¥á Ä·¥Ä·¥õ·¥Äs ·¥Ö…™·¥ò·¥ú·¥õ·¥Ä Ä ·¥Ö·¥Ä ü·¥Ä·¥ç ·¥è ô Ä·¥è ü·¥Ä…¥, ·¥Ö ü ü.

/sudolist - ·¥ò·¥á Ä…™·¥ãs·¥Ä s·¥ú·¥Ö·¥è ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä  ô·¥è·¥õ ·¥Ä ô…¢.

/lyrics […¥·¥Ä·¥ç·¥Ä ·¥ç·¥ús…™·¥Ñ] - ·¥ç·¥á…¥·¥Ñ·¥Ä Ä…™  ü…™ Ä…™·¥ã ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥ús…™·¥ã ·¥õ·¥á Ä·¥õ·¥á…¥·¥õ·¥ú ·¥Ö…™ ·¥°·¥á ô.

/song […¥·¥Ä·¥ç·¥Ä ·¥õ Ä·¥Ä·¥Ñ·¥ã] or [ è·¥õ  ü…™…¥·¥ã] - ·¥ú…¥·¥Ö·¥ú ú  ü·¥Ä…¢·¥ú ·¥Ä·¥ò·¥Ä ·¥ò·¥ú…¥ ·¥Ö·¥Ä Ä…™  è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥Ö·¥Ä ü·¥Ä·¥ç “ì·¥è Ä·¥ç·¥Ä·¥õ ·¥ç·¥òùüπ ·¥Ä·¥õ·¥Ä·¥ú ·¥ç·¥òùü∫.

/player -  ·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥ò·¥Ä…¥·¥á ü  ô·¥á Ä·¥ç·¥Ä…™…¥ …™…¥·¥õ·¥á Ä·¥Ä·¥ã·¥õ…™“ì.

c s…™…¥…¢·¥ã·¥Ä·¥õ·¥Ä…¥ ·¥Ö·¥Ä Ä…™ ·¥ò·¥á·¥ç·¥ú·¥õ·¥Ä Ä·¥Ä…¥ s·¥Ä ü·¥ú Ä·¥Ä…¥.

/queue ·¥è Ä /cqueue- ·¥ò·¥á Ä…™·¥ãs·¥Ä ·¥Ö·¥Ä“ì·¥õ·¥Ä Ä ·¥Ä…¥·¥õ Ä…™·¥Ä…¥ ·¥ç·¥ús…™·¥ã.
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="mukesh_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_extra":
        query.message.edit_caption(f"*¬ª ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥õ·¥Ä·¥ç ô·¥Ä ú·¥Ä…¥ ¬´*"
            f"""
/mstart - ·¥ç·¥á·¥ç·¥ú ü·¥Ä…™ ·¥ç·¥ús…™·¥ã  ô·¥è·¥õ.
/mhelp  - ·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥ç·¥á…¥·¥ú ·¥ò·¥á·¥ç ô·¥Ä…¥·¥õ·¥ú ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ö·¥á…¥…¢·¥Ä…¥ ·¥ò·¥á…¥J·¥á ü·¥Äs·¥Ä…¥  Ä…™…¥·¥Ñ…™ ·¥õ·¥á…¥·¥õ·¥Ä…¥…¢ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú.
/ping- ·¥ò…™…¥…¢  ô·¥è·¥õ ·¥Ö·¥Ä…¥ ·¥ò·¥á Ä…™·¥ãs·¥Ä s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥ã  Ä·¥Ä·¥ç, ·¥Ñ·¥ò·¥ú ·¥Ö ü ü ·¥Ö·¥Ä Ä…™  ô·¥è·¥õ.

*·¥ò·¥á…¥…¢·¥Ä·¥õ·¥ú Ä·¥Ä…¥ …¢ Ä·¥ú·¥ò:*
/settings - ·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢·¥Ä·¥õ·¥ú Ä·¥Ä…¥ …¢ Ä·¥ú·¥ò …™…¥ ü…™…¥·¥á ·¥Ö ü ü
""",
            parse_mode=ParseMode.MARKDOWN,
            
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="  ô·¥Ä·¥Ñ·¥ã ", callback_data="Music_"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="mukesh_support")
                    ]
                ]
            ),
        )
    elif query.data == "Music_back":
        first_name = update.effective_user.first_name
        query.message.edit_caption(PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,

        )


def get_help(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_photo(START_IMG,
                f"Hubungi saya di PM untuk mendapatkan bantuan {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="  ú·¥á ü·¥ò ‚Äã",
                                url="t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_photo(START_IMG,"¬ª ·¥Ö…™·¥ç·¥Ä…¥·¥Ä ·¥Ä…¥·¥Ö·¥Ä …™…¥…¢…™…¥ ·¥ç·¥á·¥ç ô·¥ú·¥ã·¥Ä ·¥ç·¥á…¥·¥ú ·¥ò·¥á…¥…¢·¥Ä·¥õ·¥ú Ä·¥Ä…¥?.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="üë§ ·¥© Ä…™·¥†·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä·¥õ",
                            url="https://t.me/{}?start=help".format(context.bot.username),
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üë•  ô·¥ú·¥ã·¥Ä ·¥Ö…™s…™…¥…™",
                            callback_data="help_back",
                        )
                    ],
                ]
            ),
        )
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = (
            "Berikut adalah bantuan yang tersedia untuk *{}* module:\n".format(
                HELPABLE[module].__mod_name__
            )
            + HELPABLE[module].__help__
        )
        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="mukesh_support")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id))
                for mod in USER_SETTINGS.values()
            )
            dispatcher.bot.send_message(
                user_id,
                "Ini adalah pengaturan anda saat ini:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "Sepertinya tidak ada pengaturan khusus pengguna yang tersedia :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(
                user_id,
                text="Modul mana yang ingin anda periksa {}'s pengaturan untuk?".format(
                    chat_name
                ),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )
        else:
            dispatcher.bot.send_message(
                user_id,
                "Sepertinya tidak ada pengaturan obrolan yang tersedia :'(\nSend this "
                "dalam obrolan grup tempat anda menjadi admin untuk menemukan pengaturannya saat ini!",
                parse_mode=ParseMode.MARKDOWN,
            )


def settings_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = update.effective_user
    bot = context.bot
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = bot.get_chat(chat_id)
            text = "*{}* memiliki pengaturan berikut untuk *{}* module:\n\n".format(
                escape_markdown(chat.title), CHAT_SETTINGS[module].__mod_name__
            ) + CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.reply_text(text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚óÅ",
                                callback_data="stngs_back({})".format(chat_id),
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text("""Hai, yang di sana! Ada beberapa pengaturan untuk {} - silakan pilih apa "
                kamu tertarik.""".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(text=
                """Hai, yang di sana! Ada beberapa pengaturan untuk {} - silakan pilih apa 
                kamu tertarik.""".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match.group(1)
            chat = bot.get_chat(chat_id)
            query.message.reply_text("""Hai, yang di sana! Ada beberapa pengaturan untuk {} - silakan pilih apa 
                kamu tertarik.""".format(escape_markdown(chat.title)),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message not in [
            "Pesan tidak diubah",
            "Query_id_invalid",
            "Pesan tidak dapat dihapus",
        ]:
            LOGGER.exception("Pengecualian pada tombol pengaturan. %s", str(query.data))


def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "·¥ã ü…™·¥ã ·¥Ö…™ s…™…¥…™ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢·¥Ä·¥õ·¥ú Ä·¥Ä…¥ ·¥è ô Ä·¥è ü·¥Ä…¥ …™…¥…™ ·¥Ö·¥Ä…¥ J·¥ú…¢·¥Ä ·¥ò·¥á…¥…¢·¥Ä·¥õ·¥ú Ä·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä"
            msg.reply_photo(START_IMG,text,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="·¥ò·¥á…¥…¢·¥Ä·¥õ·¥ú Ä·¥Ä…¥",
                                url="t.me/{}?start=stngs_{}".format(
                                    context.bot.username, chat.id
                                ),
                            )
                        ]
                    ]
                ),
            )
        else:
            text = "·¥ã ü…™·¥ã ·¥Ö…™s…™…¥…™ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥ú·¥ã·¥Ä ·¥ò·¥á…¥…¢·¥Ä·¥õ·¥ú Ä·¥Ä…¥"

    else:
        send_settings(chat.id, user.id, True)


def donate(update: Update, context: CallbackContext):
    user = update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]
    bot = context.bot
    if chat.type == "private":
        update.effective_message.reply_text(
            DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
        )

        if OWNER_ID != 756731910:
            update.effective_message.reply_text(
                f"¬ª ·¥õ ú·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä ·¥è“ì {dispatcher.bot.first_name} s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á …™s […¢…™·¥õ ú·¥ú ô](https://github.com/BeeDomp/BeeSpotify)"
                f"\n\n·¥õ·¥á·¥õ·¥Ä·¥ò…™ ·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥Ä·¥ò·¥Ä·¥õ  ô·¥á Ä·¥Ö·¥è…¥·¥Äs…™ ·¥ã·¥á·¥ò·¥Ä·¥Ö·¥Ä ·¥è Ä·¥Ä…¥…¢  è·¥Ä…¥…¢ s·¥Ä·¥Ä·¥õ …™…¥…™ ·¥ç·¥á…¥J·¥Ä ü·¥Ä…¥·¥ã·¥Ä…¥ s·¥Ä è·¥Ä : [·¥Ö…™s…™…¥…™]({DONATE_STRING})",
                parse_mode=ParseMode.MARKDOWN,
                
            )

    else:
        try:
            bot.send_message(
                user.id,
                DONATE_STRING,
                parse_mode=ParseMode.MARKDOWN,
                
            )

            update.effective_message.reply_text(
                "·¥Ä·¥ã·¥ú s·¥ú·¥Ö·¥Ä ú ·¥ç·¥á…¥…¢…™ Ä…™·¥ç…™·¥ç·¥ú ·¥ò·¥ás·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥á Ä…™ s·¥ú·¥ç ô·¥Ä…¥…¢·¥Ä…¥ ·¥ò·¥Ä·¥Ö·¥Ä ·¥ò·¥á…¥·¥Ñ…™·¥ò·¥õ·¥Ä·¥ã·¥ú!"
            )
        except Unauthorized:
            update.effective_message.reply_text(
                " ú·¥ú ô·¥ú…¥…¢…™ s·¥Ä è·¥Ä ·¥Ö…™ ·¥ò·¥ç ·¥õ·¥á Ä ü·¥á ô…™ ú ·¥Ö·¥Ä ú·¥ú ü·¥ú ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ …™…¥“ì·¥è Ä·¥ç·¥Äs…™ ·¥Ö·¥è…¥·¥Äs…™."
            )


def migrate_chats(update: Update, context: CallbackContext):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("Bermigrasi dari %s, ke %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("Berhasil bermigrasi!")
    raise DispatcherHandlerStop


def main():
    global x
    x=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="‚ûï·¥õ·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ s·¥Ä è·¥Ä ·¥ã·¥á ·¥è ô Ä·¥è ü·¥Ä…¥ ·¥Ä…¥·¥Ö·¥Ä‚ûï",
                            url="https://t.me/BeeMusicSpotify_bot?startgroup=true"
                            )
                       ]
                ]
                     )
    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.send_photo(
                f"@{SUPPORT_CHAT}",
                photo=f"{START_IMG}",
                caption=f"""
üî±„Ö§{BOT_NAME} ·¥ç·¥Äs…™ ú  ú…™·¥Ö·¥ú·¥ò s·¥Ä è·¥Ä…¥…¢.
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
**·¥Ö…™ ô·¥ú·¥Ä·¥õ ‚ù§Ô∏è ·¥è ü·¥á ú B·¥á·¥áD·¥è·¥ç·¥ò**
**·¥ò è·¥õ ú·¥è…¥ ·¥†·¥á Äs…™·¥è…¥:** `{y()}`
** ü…™ ô Ä·¥Ä Ä è ·¥†·¥á Äs…™·¥è…¥:** `{telever}`
**·¥õ·¥á ü·¥á·¥õ ú·¥è…¥ ·¥†·¥á Äs…™·¥è…¥:** `{tlhver}`
**·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç ·¥†·¥á Äs…™·¥è…¥:** `{pyrover}`
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
""",reply_markup=x,
                parse_mode=ParseMode.MARKDOWN,
            )
        except Unauthorized:
            LOGGER.warning(
                f"Bot tidak dapat mengirim pesan ke @{SUPPORT_CHAT}, pergi dan periksa!"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)
    start_handler = CommandHandler("start", start, run_async=True)

    help_handler = CommandHandler("help", get_help, run_async=True)
    help_callback_handler = CallbackQueryHandler(
        help_button, pattern=r"help_.*", run_async=True
    )

    settings_handler = CommandHandler("settings", get_settings, run_async=True)
    settings_callback_handler = CallbackQueryHandler(
        settings_button, pattern=r"stngs_", run_async=True
    )

    about_callback_handler = CallbackQueryHandler(
        Mukesh_about_callback, pattern=r"mukesh_", run_async=True
    )
    source_callback_handler = CallbackQueryHandler(
        Source_about_callback, pattern=r"source_", run_async=True
    )
    music_callback_handler = CallbackQueryHandler(
        Music_about_callback, pattern=r"Music_",run_async=True
    )
    mukeshrobot_main_handler = CallbackQueryHandler(
        MukeshRobot_Main_Callback, pattern=r".*_help",run_async=True)
    donate_handler = CommandHandler("donate", donate)
    migrate_handler = MessageHandler(Filters.status_update.migrate, migrate_chats)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(about_callback_handler)
    dispatcher.add_handler(music_callback_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)
    dispatcher.add_handler(donate_handler)
    dispatcher.add_handler(mukeshrobot_main_handler)
    dispatcher.add_error_handler(error_callback)
    dispatcher.add_handler(source_callback_handler)
    LOGGER.info("Using long polling.")
    updater.start_polling(timeout=15, read_latency=4, drop_pending_updates=True)

    if len(argv) not in (1, 3, 4):
        telethn.disconnect()
    else:
        telethn.run_until_disconnected()

    updater.idle()


if __name__ == "__main__":
    LOGGER.info("Modul berhasil dimuat: " + str(ALL_MODULES))
    telethn.start(bot_token=TOKEN)
    pbot.start()
    main()
